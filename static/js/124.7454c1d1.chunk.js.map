{"version":3,"file":"static/js/124.7454c1d1.chunk.js","mappings":"wNAEO,MAAMA,EAAWC,EAAAA,GAAOC,GAAEC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kNASpBC,EAAOJ,EAAAA,GAAOK,EAACC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,mHAOfI,EAAYP,EAAAA,GAAOK,EAACG,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,mHAOpBM,EAAOT,EAAAA,GAAOU,GAAEC,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,4QAQhBS,EAAaZ,EAAAA,GAAOa,IAAGC,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,+F,sBC1BpC,MA+CA,EA/CaY,KACX,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,OACbC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IACvCG,EAAAA,EAAAA,YAAU,MAENC,EAAAA,EAAAA,IAAYR,GACTS,MAAKC,IACJJ,GAAW,GACXH,EAAUO,EAAW,IAEtBC,OAAMC,IACLC,QAAQC,IAAIF,EAAM,IAEnBG,SAAQ,KACPT,GAAW,EAAM,GAGZ,GACV,CAACN,IAIJ,OACEgB,EAAAA,EAAAA,KAAA,OAAAC,UACEC,EAAAA,EAAAA,MAACnC,EAAQ,CAAAkC,SAAA,CACNZ,IAAWW,EAAAA,EAAAA,KAACG,EAAAA,EAAM,IAClBjB,EAAOkB,KAAIC,IAAA,IAAC,KAAEC,EAAI,UAAEC,EAAS,GAAEC,EAAE,aAAEC,EAAY,eAAEC,GAAgBL,EAAA,OAChEH,EAAAA,EAAAA,MAACzB,EAAI,CAAAwB,SAAA,EACHD,EAAAA,EAAAA,KAACpB,EAAU,CACT+B,MAAM,QACNC,OAAO,QACPC,IACEJ,EAAY,kCAAAK,OAC0BL,GAblD,4DAgBUM,IAAKL,KAEPV,EAAAA,EAAAA,KAAC5B,EAAI,CAAA6B,SAAEK,KACPJ,EAAAA,EAAAA,MAAC3B,EAAS,CAAA0B,SAAA,CAAC,aAAWM,OAZbC,EAaJ,QAGP,C,mFCjDV,MAAMQ,EAAM,mCACZC,EAAAA,EAAMC,SAASC,QAAU,gCAElB,MAAMC,EAAoBC,UAC/B,IACE,MAAM,KAAEC,SAAeL,EAAAA,EAAMM,IAAI,qBAAsB,CACrDC,OAAQ,CACNC,QAAST,EACTU,SAAU,WAId,OAAOJ,EAAKK,OACd,CAAE,MAAO/B,GAEP,MADAC,QAAQD,MAAM,yBAA0BA,GAClCA,CACR,GAGWgC,EAAoBP,UAC/B,IACE,MAAM,KAAEC,SAAeL,EAAAA,EAAMM,IAAI,eAAgB,CAC/CC,OAAQ,CACNC,QAAST,EACTa,QACAH,SAAU,WAGd,OAAOJ,EAAKK,OACd,CAAE,MAAO/B,GAEP,MADAC,QAAQD,MAAM,yBAA0BA,GAClCA,CACR,GAGWkC,EAAmBT,UAC9B,IACE,MAAM,KAAEC,SAAeL,EAAAA,EAAMM,IAAI,SAADT,OAAU9B,GAAW,CACnDwC,OAAQ,CACNC,QAAST,EACTU,SAAU,WAGd,OAAOJ,CACT,CAAE,MAAO1B,GAEP,MADAC,QAAQD,MAAM,oCAAqCA,GAC7CA,CACR,GAGWJ,EAAc6B,UACzB,IACE,MAAM,KAAEC,SAAeL,EAAAA,EAAMM,IAAI,SAADT,OAAU9B,EAAO,YAAY,CAC3DwC,OAAQ,CACNC,QAAST,EACTU,SAAU,WAGd,OAAOJ,EAAKS,IACd,CAAE,MAAOnC,GAEP,MADAC,QAAQD,MAAM,uBAAwBA,GAChCA,CACR,GAGWoC,EAAeX,UAC1B,IACE,MAAM,KAAEC,SAAeL,EAAAA,EAAMM,IAAI,SAADT,OAAU9B,EAAO,YAAY,CAC3DwC,OAAQ,CACNC,QAAST,EACTU,SAAU,WAGd,OAAOJ,EAAKK,OACd,CAAE,MAAO/B,GAEP,MADAC,QAAQD,MAAM,0BAA2BA,GACnCA,CACR,E","sources":["components/cast/Cast.styled.js","components/cast/Cast.jsx","helppers/Fetch.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style-type: none;\n  display: grid;\n  max-width: calc(75vw - 0px);\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  grid-gap: 20px;\n  padding: 20px;\n  background: black;\n`;\nexport const Name = styled.p`\n  text-align: center;\n  font-weight: 700;\n  font-size: 25px;\n  color: white;\n  margin-bottom: 10px;\n`;\nexport const Character = styled.p`\n  text-align: center;\n  font-size: 15px;\n  font-weight: 700;\n  color: white;\n  margin-bottom: 10px;\n`;\nexport const Item = styled.li`\n  box-shadow: 5px 5px 9px -1px rgba(210, 105, 30, 1);\n  -webkit-box-shadow: 5px, 5px, 9px, -1px rgba(210, 105, 30, 1);\n  -moz-box-shadow: 5px, 5px, 9px, -1px rgba(210, 105, 30, 1);\n  border-radius: 15px;\n  border: 4px solid orange;\n  overflow: hidden;\n`;\nexport const ActorImage = styled.img`\n  min-width: 100%;\n  @media screen and (min-width: 768px) {\n    width: 100%;\n  }\n`;\n","import { fetchActors } from 'helppers/Fetch';\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastList, Name, Character, Item, ActorImage } from './Cast.styled';\nimport { Loader } from 'components/loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchCast = () => {\n      fetchActors(movieId)\n        .then(actorsInfo => {\n          setLoading(true);\n          setActors(actorsInfo);\n        })\n        .catch(error => {\n          console.log(error);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    };\n    fetchCast();\n  }, [movieId]);\n  const defaultMovieImg =\n    'https://netsh.pp.ua/2017/08/no-photo-placeholder-opencart';\n\n  return (\n    <div>\n      <CastList>\n        {loading && <Loader />}\n        {actors.map(({ name, character, id, profile_path, original_title }) => (\n          <Item key={id}>\n            <ActorImage\n              width=\"150px\"\n              height=\"225px\"\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                  : defaultMovieImg\n              }\n              alt={original_title}\n            />\n            <Name>{name}</Name>\n            <Character>Character:{character}</Character>\n          </Item>\n        ))}\n      </CastList>\n    </div>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\nconst KEY = 'dc46b2bf0e575d3fd6c04fa612170e69';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingList = async () => {\n  try {\n    const { data } = await axios.get('trending/movie/day', {\n      params: {\n        api_key: KEY,\n        language: 'en-US',\n      },\n    });\n\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching trends:', error);\n    throw error;\n  }\n};\n\nexport const fetchSearchMovies = async query => {\n  try {\n    const { data } = await axios.get('search/movie', {\n      params: {\n        api_key: KEY,\n        query,\n        language: 'en-US',\n      },\n    });\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching movies:', error);\n    throw error;\n  }\n};\n\nexport const fetchMovieInform = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}`, {\n      params: {\n        api_key: KEY,\n        language: 'en-US',\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error('Error fetching movie information:', error);\n    throw error;\n  }\n};\n\nexport const fetchActors = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        api_key: KEY,\n        language: 'en-US',\n      },\n    });\n    return data.cast;\n  } catch (error) {\n    console.error('Error fetching cast:', error);\n    throw error;\n  }\n};\n\nexport const fetchReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        api_key: KEY,\n        language: 'en-US',\n      },\n    });\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching reviews:', error);\n    throw error;\n  }\n};\n"],"names":["CastList","styled","ul","_templateObject","_taggedTemplateLiteral","Name","p","_templateObject2","Character","_templateObject3","Item","li","_templateObject4","ActorImage","img","_templateObject5","Cast","movieId","useParams","actors","setActors","useState","loading","setLoading","useEffect","fetchActors","then","actorsInfo","catch","error","console","log","finally","_jsx","children","_jsxs","Loader","map","_ref","name","character","id","profile_path","original_title","width","height","src","concat","alt","KEY","axios","defaults","baseURL","fetchTrendingList","async","data","get","params","api_key","language","results","fetchSearchMovies","query","fetchMovieInform","cast","fetchReviews"],"sourceRoot":""}